'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import { useI18n } from '@/providers/I18nProvider';
import Header from '@/components/Header';

const HomePage: React.FC = () => {
  const { t } = useI18n();
  const router = useRouter();
  const [wordCount, setWordCount] = useState<number>(3000);
  const [selectedTemplate, setSelectedTemplate] = useState<string>('mystery');
  const [currentTeamMember, setCurrentTeamMember] = useState<number>(0);
  const [selectedPlan, setSelectedPlan] = useState<string>('basic');
  const [openFAQ, setOpenFAQ] = useState<number | null>(null);

  // Floating particles animation
  useEffect(() => {
    const createParticle = () => {
      const particle = document.createElement('div');
      particle.className = 'particle';
      particle.style.cssText = `
        position: fixed;
        width: 3px;
        height: 3px;
        background: linear-gradient(45deg, #06b6d4, #8b5cf6);
        border-radius: 50%;
        pointer-events: none;
        opacity: 0;
        z-index: 0;
        left: ${Math.random() * 100}vw;
        top: 100vh;
        box-shadow: 0 0 6px #06b6d4;
      `;
      document.body.appendChild(particle);

      const animation = particle.animate([
        { transform: 'translateY(0px)', opacity: 0 },
        { transform: 'translateY(-20px)', opacity: 1 },
        { transform: 'translateY(-100vh)', opacity: 0 }
      ], {
        duration: 8000 + Math.random() * 4000,
        easing: 'linear'
      });

      animation.onfinish = () => particle.remove();
    };

    const interval = setInterval(createParticle, 300);
    return () => clearInterval(interval);
  }, []);

  // Team slider auto-advance
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentTeamMember((prev) => (prev + 1) % teamMembers.length);
    }, 5000);
    return () => clearInterval(interval);
  }, []);

  const handleStartCreating = () => {
    // Navigate to story creation with selected template
    router.push(`/template/${selectedTemplate}`);
  };

  const templates = [
    { id: 'mystery', name: t('homepage.templates.mystery'), icon: 'üîç' },
    { id: 'romance', name: t('homepage.templates.romance'), icon: 'üíù' },
    { id: 'scifi', name: t('homepage.templates.scifi'), icon: 'üöÄ' },
    { id: 'fantasy', name: t('homepage.templates.fantasy'), icon: '‚öîÔ∏è' },
    { id: 'horror', name: t('homepage.templates.horror'), icon: 'üëª' },
    { id: 'adventure', name: t('homepage.templates.adventure'), icon: 'üó∫Ô∏è' }
  ];

  const teamMembers = [
    {
      name: 'Mai D≈©ng',
      role: 'Frontend Developer',
      description: 'Chuy√™n gia ph√°t tri·ªÉn giao di·ªán ng∆∞·ªùi d√πng v·ªõi 5+ nƒÉm kinh nghi·ªám React & Next.js',
      image: '/images/fe-dev.jpeg',
      skills: ['React', 'Next.js', 'TypeScript', 'Tailwind CSS']
    },
    {
      name: 'D≈©ng Mai',
      role: 'Backend Developer',
      description: 'Ki·∫øn tr√∫c s∆∞ h·ªá th·ªëng backend v·ªõi chuy√™n m√¥n v·ªÅ AI v√† microservices',
      image: '/images/be-dev.jpg',
      skills: ['Node.js', 'Python', 'AI/ML', 'MongoDB']
    },
    {
      name: 'D≈©ng Mike',
      role: 'UI/UX Designer',
      description: 'Nh√† thi·∫øt k·∫ø s√°ng t·∫°o v·ªõi t∆∞ duy user-centered v√† kinh nghi·ªám design thinking',
      image: '/images/designer.jpg',
      skills: ['Figma', 'Adobe XD', 'Prototyping', 'User Research']
    },
    {
      name: 'Mike D≈©ng',
      role: 'Business Analyst',
      description: 'Chuy√™n gia ph√¢n t√≠ch nghi·ªáp v·ª• v·ªõi kh·∫£ nƒÉng bridge gi·ªØa technical v√† business',
      image: '/images/ba.png',
      skills: ['Requirements Analysis', 'Process Mapping', 'Stakeholder Management', 'Agile']
    }
  ];

  const membershipPlans = [
    {
      id: 'free',
      name: 'Mi·ªÖn ph√≠',
      price: '0',
      period: 'th√°ng',
      description: 'Ph√π h·ª£p cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu',
      features: [
        '5 c√¢u chuy·ªán/th√°ng',
        'Template c∆° b·∫£n',
        'Export PDF',
        'H·ªó tr·ª£ email'
      ],
      popular: false
    },
    {
      id: 'basic',
      name: 'C∆° b·∫£n',
      price: '99.000',
      period: 'th√°ng',
      description: 'T·ªët nh·∫•t cho ng∆∞·ªùi d√πng c√° nh√¢n',
      features: [
        '50 c√¢u chuy·ªán/th√°ng',
        'T·∫•t c·∫£ template',
        'Text-to-Speech',
        'T·∫°o ·∫£nh AI',
        'Export ƒëa ƒë·ªãnh d·∫°ng',
        'H·ªó tr·ª£ ∆∞u ti√™n'
      ],
      popular: true
    },
    {
      id: 'pro',
      name: 'Chuy√™n nghi·ªáp',
      price: '199.000',
      period: 'th√°ng',
      description: 'Cho c√°c nh√† s√°ng t·∫°o n·ªôi dung',
      features: [
        'Kh√¥ng gi·ªõi h·∫°n c√¢u chuy·ªán',
        'Template premium',
        'Voice cloning',
        'T·∫°o ·∫£nh HD',
        'API access',
        'H·ªó tr·ª£ 24/7',
        'T√πy ch·ªânh branding'
      ],
      popular: false
    }
  ];

  const faqData = [
    {
      question: 'AI Story Generator ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?',
      answer: 'Ch√∫ng t√¥i s·ª≠ d·ª•ng c√¥ng ngh·ªá AI ti√™n ti·∫øn ƒë·ªÉ t·∫°o ra c√°c c√¢u chuy·ªán ƒë·ªôc ƒë√°o d·ª±a tr√™n template v√† y√™u c·∫ßu c·ªßa b·∫°n. H·ªá th·ªëng s·∫Ω ph√¢n t√≠ch ng·ªØ c·∫£nh v√† t·∫°o n·ªôi dung ph√π h·ª£p v·ªõi phong c√°ch b·∫°n mong mu·ªën.'
    },
    {
      question: 'T√¥i c√≥ th·ªÉ t√πy ch·ªânh c√¢u chuy·ªán ƒë∆∞·ª£c t·∫°o ra kh√¥ng?',
      answer: 'C√≥, b·∫°n ho√†n to√†n c√≥ th·ªÉ ch·ªânh s·ª≠a v√† t√πy ch·ªânh c√¢u chuy·ªán sau khi AI t·∫°o ra. H·ªá th·ªëng h·ªó tr·ª£ editing real-time v√† l∆∞u tr·ªØ c√°c phi√™n b·∫£n kh√°c nhau.'
    },
    {
      question: 'C√≥ h·ªó tr·ª£ ti·∫øng Vi·ªát kh√¥ng?',
      answer: 'C√≥, ch√∫ng t√¥i h·ªó tr·ª£ ƒë·∫ßy ƒë·ªß ti·∫øng Vi·ªát cho c·∫£ vi·ªác t·∫°o n·ªôi dung v√† giao di·ªán ng∆∞·ªùi d√πng. AI c·ªßa ch√∫ng t√¥i ƒë∆∞·ª£c hu·∫•n luy·ªán ƒë·∫∑c bi·ªát ƒë·ªÉ hi·ªÉu v√† t·∫°o n·ªôi dung ti·∫øng Vi·ªát t·ª± nhi√™n.'
    },
    {
      question: 'T√¥i c√≥ th·ªÉ h·ªßy g√≥i th√†nh vi√™n b·∫•t c·ª© l√∫c n√†o kh√¥ng?',
      answer: 'C√≥, b·∫°n c√≥ th·ªÉ h·ªßy g√≥i th√†nh vi√™n b·∫•t c·ª© l√∫c n√†o m√† kh√¥ng ph√°t sinh ph√≠ ph·∫°t. C√°c t√≠nh nƒÉng premium s·∫Ω ƒë∆∞·ª£c duy tr√¨ ƒë·∫øn h·∫øt chu k·ª≥ thanh to√°n hi·ªán t·∫°i.'
    },
    {
      question: 'L√†m sao ƒë·ªÉ xu·∫•t c√¢u chuy·ªán ra c√°c ƒë·ªãnh d·∫°ng kh√°c nhau?',
      answer: 'Sau khi t·∫°o xong c√¢u chuy·ªán, b·∫°n c√≥ th·ªÉ xu·∫•t ra nhi·ªÅu ƒë·ªãnh d·∫°ng nh∆∞ PDF, DOCX, EPUB, ho·∫∑c √¢m thanh. Ch·ª©c nƒÉng n√†y c√≥ s·∫µn trong t·∫•t c·∫£ c√°c g√≥i th√†nh vi√™n.'
    }
  ];

  const tutorialSteps = [
    {
      step: 1,
      title: 'Ch·ªçn Template',
      description: 'L·ª±a ch·ªçn th·ªÉ lo·∫°i c√¢u chuy·ªán ph√π h·ª£p v·ªõi √Ω t∆∞·ªüng c·ªßa b·∫°n',
      icon: 'üéØ'
    },
    {
      step: 2,
      title: 'ƒêi·ªÅn Th√¥ng Tin',
      description: 'Nh·∫≠p c√°c th√¥ng tin c·∫ßn thi·∫øt nh∆∞ nh√¢n v·∫≠t, b·ªëi c·∫£nh, ƒë·ªô d√†i c√¢u chuy·ªán',
      icon: '‚úçÔ∏è'
    },
    {
      step: 3,
      title: 'T·∫°o C√¢u Chuy·ªán',
      description: 'AI s·∫Ω ph√¢n t√≠ch v√† t·∫°o ra c√¢u chuy·ªán ho√†n ch·ªânh theo y√™u c·∫ßu c·ªßa b·∫°n',
      icon: 'ü§ñ'
    },
    {
      step: 4,
      title: 'Ch·ªânh S·ª≠a & Xu·∫•t B·∫£n',
      description: 'T√πy ch·ªânh n·ªôi dung v√† xu·∫•t ra ƒë·ªãnh d·∫°ng mong mu·ªën',
      icon: 'üìö'
    }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900 text-white overflow-hidden">
      <Header />
      
      {/* Hero Section */}
      <section className="relative py-20 px-4 text-center">
        <div className="absolute inset-0 bg-gradient-to-r from-cyan-500/10 via-purple-500/10 to-pink-500/10 animate-pulse"></div>
        
        <div className="relative z-10 max-w-6xl mx-auto">
          <h1 className="text-5xl md:text-7xl font-bold mb-6 bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent animate-pulse">
            {t('homepage.hero.title')}
          </h1>
          
          <p className="text-xl md:text-2xl text-gray-300 mb-12 max-w-4xl mx-auto leading-relaxed">
            {t('homepage.hero.subtitle')}
          </p>
          
          <button
            onClick={handleStartCreating}
            className="group relative inline-flex items-center px-12 py-4 text-xl font-semibold text-white bg-gradient-to-r from-cyan-600 to-purple-600 rounded-full shadow-lg hover:shadow-cyan-500/25 transition-all duration-300 hover:scale-105"
          >
            <span className="absolute inset-0 bg-gradient-to-r from-cyan-400 to-purple-400 rounded-full opacity-0 group-hover:opacity-20 transition-opacity duration-300"></span>
            <span className="relative flex items-center">
              {t('homepage.hero.cta')}
              <svg className="w-6 h-6 ml-2 group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
              </svg>
            </span>
          </button>
        </div>

        {/* Floating Tech Elements */}
        <div className="absolute top-20 left-10 w-20 h-20 bg-gradient-to-r from-cyan-500 to-blue-500 rounded-full opacity-20 animate-bounce"></div>
        <div className="absolute top-40 right-20 w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full opacity-30 animate-pulse"></div>
        <div className="absolute bottom-20 left-1/4 w-8 h-8 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full opacity-25 animate-ping"></div>
      </section>

      

      {/* Template Selection Section */}
      <section className="py-16 px-4">
        <div className="max-w-6xl mx-auto">
          <div className="text-center mb-12">
            <h2 className="text-4xl font-bold mb-4 bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent">
              {t('homepage.templates.title')}
            </h2>
            <p className="text-gray-300 text-lg max-w-2xl mx-auto">
              {t('homepage.templates.subtitle')}
            </p>
          </div>

          {/* Template Grid */}
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-8">
            {templates.map((template) => (
              <button
                key={template.id}
                onClick={() => setSelectedTemplate(template.id)}
                className={`group p-6 rounded-2xl border-2 transition-all duration-300 hover:scale-105 ${
                  selectedTemplate === template.id
                    ? 'bg-gradient-to-br from-cyan-600/20 to-purple-600/20 border-cyan-400 shadow-lg shadow-cyan-500/25'
                    : 'bg-gray-800/30 border-gray-600 hover:border-gray-500'
                }`}
              >
                <div className="text-4xl mb-3">{template.icon}</div>
                <div className="text-sm font-medium text-gray-200 group-hover:text-white transition-colors">
                  {template.name}
                </div>
              </button>
            ))}
          </div>

          {/* Create Story and Dashboard Buttons */}
          <div className="text-center space-y-4">
            <button
              onClick={handleStartCreating}
              className="inline-flex items-center px-8 py-4 text-lg font-semibold bg-gradient-to-r from-purple-600 to-pink-600 rounded-xl hover:from-purple-700 hover:to-pink-700 transition-all duration-300 hover:scale-105 shadow-lg hover:shadow-purple-500/25"
            >
              <svg className="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.536L16.732 3.732z" />
              </svg>
              {t('homepage.createStory')}
            </button>
          </div>
        </div>
      </section>

      {/* Membership Plans Section */}
      <section className="py-16 px-4">
        <div className="max-w-6xl mx-auto">
          <div className="text-center mb-12">
            <h2 className="text-4xl font-bold mb-4 bg-gradient-to-r from-yellow-400 to-orange-400 bg-clip-text text-transparent">
              G√≥i Th√†nh Vi√™n
            </h2>
            <p className="text-gray-300 text-lg max-w-2xl mx-auto">
              L·ª±a ch·ªçn g√≥i ph√π h·ª£p ƒë·ªÉ t·∫≠n h∆∞·ªüng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng AI Story Generator
            </p>
          </div>

          <div className="grid md:grid-cols-3 gap-8">
            {membershipPlans.map((plan) => (
              <div
                key={plan.id}
                className={`relative group bg-gradient-to-br from-gray-800/50 to-gray-900/50 backdrop-blur-md rounded-2xl p-8 border transition-all duration-300 hover:scale-105 ${
                  plan.popular
                    ? 'border-yellow-400 shadow-lg shadow-yellow-500/25'
                    : 'border-gray-700/50 hover:border-gray-600'
                }`}
              >
                {plan.popular && (
                  <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
                    <span className="bg-gradient-to-r from-yellow-400 to-orange-400 text-gray-900 px-4 py-1 rounded-full text-sm font-bold">
                      PH·ªî BI·∫æN NH·∫§T
                    </span>
                  </div>
                )}

                <div className="text-center mb-6">
                  <h3 className="text-2xl font-bold text-white mb-2">{plan.name}</h3>
                  <p className="text-gray-400 mb-4">{plan.description}</p>
                  <div className="flex items-baseline justify-center">
                    <span className="text-4xl font-bold text-white">{plan.price}</span>
                    <span className="text-gray-400 ml-1">‚Ç´/{plan.period}</span>
                  </div>
                </div>

                <ul className="space-y-3 mb-8">
                  {plan.features.map((feature, index) => (
                    <li key={index} className="flex items-center text-gray-300">
                      <svg className="w-5 h-5 text-green-400 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                      {feature}
                    </li>
                  ))}
                </ul>

                <button
                  onClick={() => setSelectedPlan(plan.id)}
                  className={`w-full py-3 rounded-lg font-semibold transition-all duration-300 ${
                    plan.popular
                      ? 'bg-gradient-to-r from-yellow-500 to-orange-500 text-gray-900 hover:from-yellow-600 hover:to-orange-600'
                      : 'bg-gray-700 text-gray-200 hover:bg-gray-600'
                  }`}
                >
                  {plan.price === '0' ? 'B·∫Øt ƒê·∫ßu Mi·ªÖn Ph√≠' : 'ƒêƒÉng K√Ω Ngay'}
                </button>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Core Features Section */}
      <section className="py-16 px-4">
        <div className="max-w-6xl mx-auto">
          <div className="text-center mb-12">
            <h2 className="text-4xl font-bold mb-4 bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
              {t('homepage.features.title')}
            </h2>
            <p className="text-gray-300 text-lg max-w-2xl mx-auto">
              {t('homepage.features.subtitle')}
            </p>
          </div>

          <div className="grid md:grid-cols-3 gap-8">
            {/* Feature 1: Story Generation */}
            <div className="group bg-gradient-to-br from-gray-800/50 to-gray-900/50 backdrop-blur-md rounded-2xl p-8 border border-gray-700/50 hover:border-cyan-500/50 transition-all duration-300 hover:scale-105">
              <div className="w-16 h-16 bg-gradient-to-br from-cyan-500 to-blue-500 rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform duration-300">
                <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                </svg>
              </div>
              <h3 className="text-2xl font-bold text-white mb-4">{t('homepage.features.story.title')}</h3>
              <p className="text-gray-300 leading-relaxed">{t('homepage.features.story.description')}</p>
            </div>

            {/* Feature 2: Voice Conversion */}
            <div className="group bg-gradient-to-br from-gray-800/50 to-gray-900/50 backdrop-blur-md rounded-2xl p-8 border border-gray-700/50 hover:border-purple-500/50 transition-all duration-300 hover:scale-105">
              <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform duration-300">
                <svg className="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.617.79l-4-3.207a1 1 0 01-.383-.79V6.207a1 1 0 01.383-.79l4-3.207a1 1 0 01.617-.134zM14 8.586V14a1 1 0 102 0V8.586l2.293 2.293a1 1 0 001.414-1.414l-4-4a1 1 0 00-1.414 0l-4 4a1 1 0 001.414 1.414L14 8.586z" clipRule="evenodd" />
                </svg>
              </div>
              <h3 className="text-2xl font-bold text-white mb-4">{t('homepage.features.voice.title')}</h3>
              <p className="text-gray-300 leading-relaxed">{t('homepage.features.voice.description')}</p>
            </div>

            {/* Feature 3: Image Generation */}
            <div className="group bg-gradient-to-br from-gray-800/50 to-gray-900/50 backdrop-blur-md rounded-2xl p-8 border border-gray-700/50 hover:border-yellow-500/50 transition-all duration-300 hover:scale-105">
              <div className="w-16 h-16 bg-gradient-to-br from-yellow-500 to-orange-500 rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform duration-300">
                <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
              </div>
              <h3 className="text-2xl font-bold text-white mb-4">{t('homepage.features.image.title')}</h3>
              <p className="text-gray-300 leading-relaxed">{t('homepage.features.image.description')}</p>
            </div>
          </div>
        </div>
      </section>

      {/* Tutorial Guide Section */}
      <section className="py-16 px-4">
        <div className="max-w-6xl mx-auto">
          <div className="text-center mb-12">
            <h2 className="text-4xl font-bold mb-4 bg-gradient-to-r from-indigo-400 to-purple-400 bg-clip-text text-transparent">
              H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng
            </h2>
            <p className="text-gray-300 text-lg max-w-2xl mx-auto">
              T·∫°o c√¢u chuy·ªán AI ch·ªâ v·ªõi 4 b∆∞·ªõc ƒë∆°n gi·∫£n
            </p>
          </div>

          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
            {tutorialSteps.map((step, index) => (
              <div key={index} className="group relative">
                <div className="bg-gradient-to-br from-gray-800/50 to-gray-900/50 backdrop-blur-md rounded-2xl p-6 border border-gray-700/50 hover:border-indigo-500/50 transition-all duration-300 hover:scale-105 text-center">
                  <div className="text-5xl mb-4">{step.icon}</div>
                  <div className="w-12 h-12 bg-gradient-to-br from-indigo-500 to-purple-500 rounded-full flex items-center justify-center mx-auto mb-4">
                    <span className="text-white font-bold text-lg">{step.step}</span>
                  </div>
                  <h3 className="text-xl font-bold text-white mb-3">{step.title}</h3>
                  <p className="text-gray-300 text-sm leading-relaxed">{step.description}</p>
                </div>
                
                {/* Arrow connector */}
                {index < tutorialSteps.length - 1 && (
                  <div className="hidden lg:block absolute top-1/2 -right-3 transform -translate-y-1/2 z-10">
                    <svg className="w-6 h-6 text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                    </svg>
                  </div>
                )}
              </div>
            ))}
          </div>

          <div className="text-center mt-12">
            <button
              onClick={handleStartCreating}
              className="inline-flex items-center px-8 py-4 text-lg font-semibold bg-gradient-to-r from-indigo-600 to-purple-600 rounded-xl hover:from-indigo-700 hover:to-purple-700 transition-all duration-300 hover:scale-105 shadow-lg hover:shadow-indigo-500/25"
            >
              <svg className="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
              B·∫Øt ƒê·∫ßu Ngay
            </button>
          </div>
        </div>
      </section>

      {/* FAQ Section */}
      <section className="py-16 px-4">
        <div className="max-w-4xl mx-auto">
          <div className="text-center mb-12">
            <h2 className="text-4xl font-bold mb-4 bg-gradient-to-r from-emerald-400 to-teal-400 bg-clip-text text-transparent">
              C√¢u H·ªèi Th∆∞·ªùng G·∫∑p
            </h2>
            <p className="text-gray-300 text-lg max-w-2xl mx-auto">
              T√¨m c√¢u tr·∫£ l·ªùi cho nh·ªØng th·∫Øc m·∫Øc ph·ªï bi·∫øn v·ªÅ AI Story Generator
            </p>
          </div>

          <div className="space-y-4">
            {faqData.map((faq, index) => (
              <div key={index} className="bg-gray-800/50 backdrop-blur-md rounded-xl border border-gray-700/50 overflow-hidden">
                <button
                  onClick={() => setOpenFAQ(openFAQ === index ? null : index)}
                  className="w-full px-6 py-4 text-left flex items-center justify-between hover:bg-gray-700/30 transition-colors duration-200"
                >
                  <span className="font-semibold text-white pr-4">{faq.question}</span>
                  <svg
                    className={`w-5 h-5 text-gray-400 transition-transform duration-200 flex-shrink-0 ${
                      openFAQ === index ? 'rotate-180' : ''
                    }`}
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                  </svg>
                </button>
                
                {openFAQ === index && (
                  <div className="px-6 pb-4 text-gray-300 leading-relaxed border-t border-gray-700/50 pt-4">
                    {faq.answer}
                  </div>
                )}
              </div>
            ))}
          </div>

          <div className="text-center mt-12">
            <p className="text-gray-400 mb-4">V·∫´n c√≥ th·∫Øc m·∫Øc kh√°c?</p>
            <button className="inline-flex items-center px-6 py-3 bg-gradient-to-r from-emerald-600 to-teal-600 rounded-lg hover:from-emerald-700 hover:to-teal-700 transition-all duration-300 text-white font-medium">
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
              </svg>
              Li√™n H·ªá H·ªó Tr·ª£
            </button>
          </div>
        </div>
      </section>


      {/* Team Introduction Section */}
      <section className="py-16 px-4">
        <div className="max-w-6xl mx-auto">
          <div className="text-center mb-12">
            <h2 className="text-4xl font-bold mb-4 bg-gradient-to-r from-green-400 to-blue-400 bg-clip-text text-transparent">
              ƒê·ªôi Ng≈© Ph√°t Tri·ªÉn
            </h2>
            <p className="text-gray-300 text-lg max-w-2xl mx-auto">
              G·∫∑p g·ª° nh·ªØng con ng∆∞·ªùi t√†i nƒÉng ƒë·∫±ng sau s·∫£n ph·∫©m AI Story Generator
            </p>
          </div>

          <div className="relative bg-gray-800/50 backdrop-blur-md rounded-2xl p-8 border border-gray-700/50">
            <div className="grid md:grid-cols-2 gap-8 items-center">
              {/* Team Member Info */}
              <div className="space-y-6">
                <div className="text-8xl text-center md:text-left rounded-full w-[150px] h-[150px] overflow-hidden">
                  <Image src={`${teamMembers[currentTeamMember].image}`} alt= '' width={150} height={150} />
                </div>
                <div>
                  <h3 className="text-3xl font-bold text-white mb-2">
                    {teamMembers[currentTeamMember].name}
                  </h3>
                  <p className="text-xl text-cyan-400 mb-4">
                    {teamMembers[currentTeamMember].role}
                  </p>
                  <p className="text-gray-300 leading-relaxed mb-6">
                    {teamMembers[currentTeamMember].description}
                  </p>
                  <div className="flex flex-wrap gap-2">
                    {teamMembers[currentTeamMember].skills.map((skill, index) => (
                      <span key={index} className="px-3 py-1 bg-gradient-to-r from-cyan-600/20 to-purple-600/20 border border-cyan-400/30 rounded-full text-sm text-cyan-300">
                        {skill}
                      </span>
                    ))}
                  </div>
                </div>
              </div>

              {/* Team Member Navigation */}
              <div className="space-y-4">
                {teamMembers.map((member, index) => (
                  <button
                    key={index}
                    onClick={() => setCurrentTeamMember(index)}
                    className={`w-full p-4 rounded-xl border-2 transition-all duration-300 text-left ${
                      currentTeamMember === index
                        ? 'bg-gradient-to-r from-cyan-600/20 to-purple-600/20 border-cyan-400'
                        : 'bg-gray-700/30 border-gray-600 hover:border-gray-500'
                    }`}
                  >
                    <div className="flex items-center space-x-4">
                      <div>
                        <div className="font-semibold text-white">{member.name}</div>
                        <div className="text-sm text-gray-400">{member.role}</div>
                      </div>
                    </div>
                  </button>
                ))}
              </div>
            </div>

            {/* Progress Indicator */}
            <div className="flex justify-center mt-8 space-x-2">
              {teamMembers.map((_, index) => (
                <div
                  key={index}
                  className={`w-3 h-3 rounded-full transition-all duration-300 ${
                    currentTeamMember === index ? 'bg-cyan-400' : 'bg-gray-600'
                  }`}
                />
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="py-8 px-4 border-t border-gray-800">
        <div className="max-w-6xl mx-auto text-center">
          <p className="text-gray-400">{t('homepage.footer.copyright')}</p>
        </div>
      </footer>

      {/* Custom CSS for slider */}
      <style>{`
        .slider::-webkit-slider-thumb {
          appearance: none;
          height: 20px;
          width: 20px;
          border-radius: 50%;
          background: linear-gradient(45deg, #06b6d4, #8b5cf6);
          cursor: pointer;
          box-shadow: 0 0 10px rgba(6, 182, 212, 0.5);
        }
        .slider::-moz-range-thumb {
          height: 20px;
          width: 20px;
          border-radius: 50%;
          background: linear-gradient(45deg, #06b6d4, #8b5cf6);
          cursor: pointer;
          border: none;
          box-shadow: 0 0 10px rgba(6, 182, 212, 0.5);
        }
      `}</style>
    </div>
  );
};

export default HomePage; 