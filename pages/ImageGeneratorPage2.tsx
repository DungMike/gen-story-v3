'use client';

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useI18n } from '@/providers/I18nProvider';
import Header from '@/components/Header';
import LoadingSpinner from '@/components/LoadingSpinner';
import { generateBuddhistDetectiveStory } from '@/services/geminiService';
import { BuddhistDetectiveFormData } from '@/types';
import { saveStoryToLocalStorage, getStoriesFromLocalStorage } from '@/services/ttsService';
import { v4 as uuidv4 } from 'uuid';

interface StoryFormData {
  genre: string;
  story_title: string;
  setting: string;
  custom_setting: string;
  main_character_name: string;
  main_character_dharma_name: string;
  main_character_past: string[];
  victim_name: string;
  victim_role: string;
  investigator_name: string;
  investigator_traits: string[];
  karmic_theme: string;
  custom_karmic_theme: string;
  discovery_method: string;
  philosophy_depth: number;
  total_length: string;
  chapter_count: number;
  chapter_length: number;
  ending_type: string[];
  output_format: string;
}

interface ChapterHighlight {
  chapter: number;
  title: string;
  content: string;
}

const ImageGeneratorPage2: React.FC = () => {
  const { t } = useI18n();
  const router = useRouter();

  const [formData, setFormData] = useState<StoryFormData>({
    genre: 'Ph√° √°n ‚Äì nghi·ªáp b√°o ‚Äì t√¢m linh (k·∫øt th√∫c b·∫±ng b·∫£n √°n v√† b√†i h·ªçc)',
    story_title: '',
    setting: 'ch√πa-c·ªï-tr√™n-n√∫i',
    custom_setting: '',
    main_character_name: 'Nguy·ªÖn H·ªØu Duy',
    main_character_dharma_name: 'T√¢m Minh',
    main_character_past: ['t·ª´ng-gi·∫øt-ng∆∞·ªùi-v√¥-t·ªôi'],
    victim_name: 'S∆∞ c√¥ Nh∆∞ L√†nh',
    victim_role: 'tu-sƒ©',
    investigator_name: 'Th∆∞·ª£ng √∫y L√™ Th·ª•',
    investigator_traits: ['√≠t-n√≥i-t·ª´ng-c√≥-cƒÉn-tu'],
    karmic_theme: 'gi·∫øt-nh·∫ßm-ng∆∞·ªùi-v√¥-t·ªôi',
    custom_karmic_theme: '',
    discovery_method: 't∆∞·ª£ng-linh-r·ªâ-m√°u',
    philosophy_depth: 5,
    total_length: 'truy·ªán-v·ª´a',
    chapter_count: 7,
    chapter_length: 1500,
    ending_type: ['b·∫£n-√°n-r√µ-r√†ng', 'th·ª©c-t·ªânh-c·∫£i-t·∫°o', 'b√†i-h·ªçc-nh√¢n-qu·∫£'],
    output_format: 'k·ªãch-b·∫£n-k·ªÉ-chuy·ªán'
  });

  // Add new state for story generation
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedStory, setGeneratedStory] = useState('');
  const [showStory, setShowStory] = useState(false);
  const [savedStoryInfo, setSavedStoryInfo] = useState<{id: string, title: string} | null>(null);
  const [retryAttempt, setRetryAttempt] = useState(0);
  const [retryError, setRetryError] = useState<string | null>(null);

  // Helper function to generate default story title with incrementing number
  const generateDefaultStoryTitle = (): string => {
    const existingStories = getStoriesFromLocalStorage();
    const defaultTitleStories = existingStories.filter(story => 
      story.title?.startsWith('Truy·ªán ch∆∞a ƒë·∫∑t t√™n')
    );
    const nextNumber = defaultTitleStories.length + 1;
    return `Truy·ªán ch∆∞a ƒë·∫∑t t√™n ${nextNumber}`;
  };

  // Custom save function for Buddhist Detective stories with proper title handling
  const saveBuddhistDetectiveStory = (storyContent: string, customTitle?: string): string => {
    try {
      const existingStories = getStoriesFromLocalStorage();
      const storyId = uuidv4();
      const timestamp = new Date().toISOString();
      
      // Use custom title if provided and not empty, otherwise generate default title
      const finalTitle = customTitle?.trim() || generateDefaultStoryTitle();
      
      const storyData = {
        content: storyContent,
        timestamp,
        id: storyId,
        title: finalTitle,
        templateName: 'Buddhist Detective'
      };
      
      const updatedStories = [storyData, ...existingStories];
      localStorage.setItem('generated_stories', JSON.stringify(updatedStories));
      
      return storyId;
    } catch (error) {
      console.error('Error saving Buddhist Detective story:', error);
      return '';
    }
  };

  const [chapterHighlights] = useState<ChapterHighlight[]>([
    { 
      chapter: 1, 
      title: 'C√°i ch·∫øt trong ch√πa', 
      content: 'M·ªü ƒë·∫ßu b·∫±ng m·ªôt v·ª• ch·∫øt ng∆∞·ªùi k·ª≥ l·∫° t·∫°i ch√πa. Xu·∫•t hi·ªán hi·ªán t∆∞·ª£ng linh d·ªã (t∆∞·ª£ng r·ªâ m√°u, √¢m thanh l·∫°...). T·∫°o kh√¥ng kh√≠ u √°m, gieo m·∫ßm cho v·ª• √°n v√† nghi·ªáp l·ª±c s·∫Øp ƒë∆∞·ª£c h√© m·ªü.' 
    },
    { 
      chapter: 2, 
      title: 'Ng∆∞·ªùi gi·ªØ nghi·ªáp v√† ƒëi·ªÅu tra vi√™n', 
      content: 'Nh√¢n v·∫≠t ƒëi·ªÅu tra xu·∫•t hi·ªán v√† b·∫Øt ƒë·∫ßu t√¨m hi·ªÉu s·ª± th·∫≠t. G·∫∑p nh√¢n v·∫≠t ch√≠nh ‚Äì ng∆∞·ªùi c√≥ qu√° kh·ª© b·∫•t ·ªïn ho·∫∑c nghi·ªáp s√°t. B·ªëi c·∫£nh ch√πa d·∫ßn h√© l·ªô nh·ªØng t·∫ßng nghƒ©a t√¢m linh.' 
    },
    { 
      chapter: 3, 
      title: 'T∆∞·ª£ng linh ‚Äì gi·∫•c m∆° ‚Äì v·∫≠t ch·ª©ng', 
      content: 'C√°c manh m·ªëi phi v·∫≠t l√Ω b·∫Øt ƒë·∫ßu l·ªô di·ªán: m·ªông b√°o, hi·ªán t∆∞·ª£ng t√¢m linh, v·∫≠t ch·ª©ng b√≠ ·∫©n (th∆∞, x√¢u chu·ªói...). Y·∫øu t·ªë si√™u h√¨nh k·∫øt n·ªëi v·ªõi t·ªôi nghi·ªáp x∆∞a.' 
    },
    { 
      chapter: 4, 
      title: 'L·∫≠t l·∫°i k√Ω ·ª©c t·ªôi l·ªói', 
      content: 'Qu√° kh·ª© c·ªßa nh√¢n v·∫≠t ch√≠nh (ho·∫∑c hung th·ªß) ƒë∆∞·ª£c ƒë√†o s√¢u. H√†nh vi sai tr√°i trong qu√° kh·ª© tr·ªìi l√™n. N·ªôi t√¢m gi·∫±ng x√©, c·∫£m gi√°c nghi·ªáp l·ª±c ƒëeo b√°m n·∫∑ng n·ªÅ.' 
    },
    { 
      chapter: 5, 
      title: 'T·ª± th√∫ trong s√°m h·ªëi', 
      content: 'S·ª± th·∫≠t ƒë∆∞·ª£c ph∆°i b√†y. Nh√¢n v·∫≠t ch√≠nh ho·∫∑c hung th·ªß th√∫ nh·∫≠n t·ªôi l·ªói. C√≥ s·ª± th·ª©c t·ªânh v·ªÅ t√¢m linh ‚Äì kh√¥ng xin tha th·ª©, m√† mong tr·∫£ nghi·ªáp.' 
    },
    { 
      chapter: 6, 
      title: 'B·∫£n √°n t·ª´ ph√°p lu·∫≠t v√† nh√¢n qu·∫£', 
      content: 'T·ªôi l·ªói ƒë∆∞·ª£c ph√°p lu·∫≠t x√©t x·ª≠. Nh∆∞ng b·∫£n √°n kh√¥ng d·ª´ng ·ªü ph√°p lu·∫≠t ‚Äì m√† m·ªü ra qu√° tr√¨nh c·∫£i h√≥a t√¢m linh. Nh√¢n v·∫≠t nh·∫≠n tr√°ch nhi·ªám v√† ch·∫•p nh·∫≠n qu·∫£ b√°o.' 
    },
    { 
      chapter: 7, 
      title: 'B√†i h·ªçc cu·ªëi c√πng ‚Äì gieo nh√¢n n√†o g·∫∑t qu·∫£ ƒë√≥', 
      content: 'Truy·ªán kh√©p l·∫°i b·∫±ng m·ªôt th√¥ng ƒëi·ªáp nh√¢n qu·∫£ r√µ r√†ng. Nh·∫•n m·∫°nh r·∫±ng nghi·ªáp kh√¥ng m·∫•t, ch·ªâ chuy·ªÉn. Gieo nh√¢n g√¨ g·∫∑t qu·∫£ ·∫•y. M·ªü l·ªëi cho ng∆∞·ªùi ƒë·ªçc chi√™m nghi·ªám v√† th·ª©c t·ªânh.' 
    },
  ]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    
    if (type === 'checkbox') {
      const checkbox = e.target as HTMLInputElement;
      setFormData(prev => {
        const currentArray = prev[name as keyof StoryFormData] as string[];
        if (checkbox.checked) {
          return { ...prev, [name]: [...currentArray, value] };
        } else {
          return { ...prev, [name]: currentArray.filter(item => item !== value) };
        }
      });
    } else if (type === 'number') {
      setFormData(prev => ({ ...prev, [name]: parseInt(value) || 0 }));
    } else {
      setFormData(prev => ({ ...prev, [name]: value }));
    }
  };

  // Function to generate story with retry logic
  const generateStoryWithRetry = async (buddhistFormData: BuddhistDetectiveFormData, attempt: number = 1): Promise<string> => {
    const maxAttempts = 3;
    setRetryAttempt(attempt);
    setRetryError(null);

    try {
      console.log(`Attempt ${attempt}/${maxAttempts}: Generating Buddhist Detective story...`);
      
      // Generate story using streaming
      const generator = generateBuddhistDetectiveStory(buddhistFormData);
      let fullStoryContent = '';
      
      for await (const chunk of generator) {
        fullStoryContent += chunk;
        setGeneratedStory(prev => prev + chunk);
      }

      if (!fullStoryContent.trim()) {
        throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c n·ªôi dung truy·ªán t·ª´ API');
      }

      console.log(`‚úÖ Attempt ${attempt} th√†nh c√¥ng`);
      setRetryAttempt(0); // Reset retry counter on success
      return fullStoryContent;

    } catch (error) {
      console.error(`‚ùå Attempt ${attempt} failed:`, error);
      const errorMessage = error instanceof Error ? error.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
      
      if (attempt < maxAttempts) {
        setRetryError(`L·ªói attempt ${attempt}: ${errorMessage}. ƒêang th·ª≠ l·∫°i...`);
        console.log(`üîÑ Retrying... (${attempt + 1}/${maxAttempts})`);
        
        // Wait a bit before retry (exponential backoff)
        const delayMs = Math.pow(2, attempt - 1) * 1000; // 1s, 2s, 4s
        await new Promise(resolve => setTimeout(resolve, delayMs));
        
        // Clear previous story content before retry
        setGeneratedStory('');
        
        // Recursive retry
        return generateStoryWithRetry(buddhistFormData, attempt + 1);
      } else {
        // All attempts failed
        setRetryError(`ƒê√£ th·ª≠ ${maxAttempts} l·∫ßn nh∆∞ng v·∫´n g·∫∑p l·ªói: ${errorMessage}`);
        throw new Error(`Kh√¥ng th·ªÉ t·∫°o truy·ªán sau ${maxAttempts} l·∫ßn th·ª≠. L·ªói cu·ªëi: ${errorMessage}`);
      }
    }
  };

  const handleSubmit = async (e?: React.FormEvent) => {
    e?.preventDefault();
    
    try {
      setIsGenerating(true);
      setGeneratedStory('');
      setShowStory(true);
      setSavedStoryInfo(null); // Clear previous save notification
      setRetryAttempt(0);
      setRetryError(null);
      
      // Convert form data to Buddhist detective format
      const buddhistFormData: BuddhistDetectiveFormData = {
        genre: formData.genre,
        story_title: formData.story_title,
        setting: formData.setting,
        custom_setting: formData.custom_setting,
        main_character_name: formData.main_character_name,
        main_character_dharma_name: formData.main_character_dharma_name,
        main_character_past: formData.main_character_past,
        victim_name: formData.victim_name,
        victim_role: formData.victim_role,
        investigator_name: formData.investigator_name,
        investigator_traits: formData.investigator_traits,
        karmic_theme: formData.karmic_theme,
        custom_karmic_theme: formData.custom_karmic_theme,
        discovery_method: formData.discovery_method,
        philosophy_depth: formData.philosophy_depth,
        total_length: formData.total_length,
        chapter_count: formData.chapter_count,
        chapter_length: formData.chapter_length,
        ending_type: formData.ending_type,
        output_format: formData.output_format
      };

      console.log('Starting story generation with retry mechanism...', buddhistFormData);

      // Generate story with retry logic
      const fullStoryContent = await generateStoryWithRetry(buddhistFormData);
      
      // Save story to localStorage after generation completes
      if (fullStoryContent.trim()) {
        const finalTitle = formData.story_title.trim() || generateDefaultStoryTitle();
        const storyId = saveBuddhistDetectiveStory(fullStoryContent, formData.story_title);
        console.log(`Truy·ªán ƒë√£ ƒë∆∞·ª£c l∆∞u v·ªõi ID: ${storyId} v√† t√™n: "${finalTitle}"`);
        setSavedStoryInfo({id: storyId, title: finalTitle});
      }
      
    } catch (error) {
      console.error('Final error after all retries:', error);
      const errorMessage = error instanceof Error ? error.message : 'C√≥ l·ªói x·∫£y ra khi t·∫°o truy·ªán';
      setGeneratedStory(`‚ùå ${errorMessage}\n\nVui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.`);
    } finally {
      setIsGenerating(false);
      setRetryAttempt(0);
    }
  };

  const handleBackToHome = () => {
    router.push('/');
  };

  return (
    <div className="min-h-screen bg-gray-900 text-gray-100 font-sans">
      <Header />
      <main className="container mx-auto p-4 md:p-8">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold text-blue-400">
            C√ÅC L·ª∞A CH·ªåN KH·ªûI T·∫†O TRUY·ªÜN (CHO TOOL)
          </h1>
          <button
            onClick={handleBackToHome}
            className="px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors"
          >
            ‚Üê Quay l·∫°i
          </button>
        </div>

        <form onSubmit={handleSubmit} className="space-y-8">
          {/* 1. Th·ªÉ lo·∫°i */}
          <div className="bg-gray-800 p-6 rounded-lg">
            <label className="block text-lg font-semibold mb-3">
              üîπ 1. Th·ªÉ lo·∫°i (genre)
            </label>
            <input
              type="text"
              name="genre"
              value={formData.genre}
              onChange={handleInputChange}
              className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white"
              readOnly
            />
          </div>

          {/* 2. T√™n truy·ªán */}
          <div className="bg-gray-800 p-6 rounded-lg">
            <label className="block text-lg font-semibold mb-3">
              üìå 2. T√™n truy·ªán (story_title)
            </label>
            <input
              type="text"
              name="story_title"
              value={formData.story_title}
              onChange={handleInputChange}
              placeholder="Nh·∫≠p t√πy √Ω (g·ª£i √Ω: mang m√†u s·∫Øc thi·ªÅn, t∆∞·ª£ng, nghi·ªáp, nh√¢n qu·∫£‚Ä¶)"
              className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400"
            />
          </div>

          {/* 3. B·ªëi c·∫£nh ch√≠nh */}
          <div className="bg-gray-800 p-6 rounded-lg">
            <label className="block text-lg font-semibold mb-3">
              3. B·ªëi c·∫£nh ch√≠nh (setting)
            </label>
            <div className="space-y-3">
              {[
                { value: 'ch√πa-c·ªï-tr√™n-n√∫i', label: '‚õ∞Ô∏è Ch√πa c·ªï tr√™n n√∫i' },
                { value: 'thi·ªÅn-am-gi·ªØa-r·ª´ng-s∆∞∆°ng', label: 'üå´Ô∏è Thi·ªÅn am gi·ªØa r·ª´ng s∆∞∆°ng' },
                { value: 'l√†ng-ngh·ªÅ-ƒë·ª•c-t∆∞·ª£ng-g·ªó', label: 'ü™µ L√†ng ngh·ªÅ ƒë·ª•c t∆∞·ª£ng g·ªó' },
                { value: 'khu-m·ªô-am-th·∫•t-gi·∫øng-c·ªï', label: 'üî• Khu m·ªô, am th·∫•t, gi·∫øng c·ªï' }
              ].map(option => (
                <label key={option.value} className="flex items-center">
                  <input
                    type="radio"
                    name="setting"
                    value={option.value}
                    checked={formData.setting === option.value}
                    onChange={handleInputChange}
                    className="mr-3"
                  />
                  {option.label}
                </label>
              ))}
              <label className="flex items-center">
                <input
                  type="radio"
                  name="setting"
                  value="custom"
                  checked={formData.setting === 'custom'}
                  onChange={handleInputChange}
                  className="mr-3"
                />
                ‚úçÔ∏è Nh·∫≠p t√πy ch·ªânh
              </label>
              {formData.setting === 'custom' && (
                <input
                  type="text"
                  name="custom_setting"
                  value={formData.custom_setting}
                  onChange={handleInputChange}
                  placeholder="Nh·∫≠p b·ªëi c·∫£nh t√πy ch·ªânh"
                  className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 mt-2"
                />
              )}
            </div>
          </div>

          {/* 4. Nh√¢n v·∫≠t ch√≠nh */}
          <div className="bg-gray-800 p-6 rounded-lg">
            <label className="block text-lg font-semibold mb-3">
              üë§ 4. Nh√¢n v·∫≠t ch√≠nh (main_character)
            </label>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">H·ªç t√™n:</label>
                <input
                  type="text"
                  name="main_character_name"
                  value={formData.main_character_name}
                  onChange={handleInputChange}
                  className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white"
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-2">üßò‚Äç‚ôÇÔ∏è Ph√°p danh:</label>
                <input
                  type="text"
                  name="main_character_dharma_name"
                  value={formData.main_character_dharma_name}
                  onChange={handleInputChange}
                  className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white"
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-2">üìú Qu√° kh·ª©:</label>
                <div className="space-y-2">
                  {[
                    { value: 't·ª´ng-gi·∫øt-ng∆∞·ªùi-v√¥-t·ªôi', label: 'T·ª´ng gi·∫øt ng∆∞·ªùi v√¥ t·ªôi' },
                    { value: 'l√†m-ngh·ªÅ-s√°t-sinh', label: 'L√†m ngh·ªÅ s√°t sinh (ƒë·ª•c t∆∞·ª£ng g·ªó tr·∫ßm, gi·∫øt m·ªï...)' },
                    { value: 'gieo-nghi·ªáp-v√¨-th√π-h·∫≠n', label: 'Gieo nghi·ªáp v√¨ th√π h·∫≠n / v√¥ t√¨nh' },
                    { value: 'ƒë√£-t·ª´ng-c√≥-cƒÉn-tu', label: 'ƒê√£ t·ª´ng c√≥ cƒÉn tu, gi·ªù s·ªëng ·∫©n t·∫°i ch√πa' }
                  ].map(option => (
                    <label key={option.value} className="flex items-center">
                      <input
                        type="checkbox"
                        name="main_character_past"
                        value={option.value}
                        checked={formData.main_character_past.includes(option.value)}
                        onChange={handleInputChange}
                        className="mr-3"
                      />
                      {option.label}
                    </label>
                  ))}
                </div>
              </div>
            </div>
          </div>

          {/* 5. N·∫°n nh√¢n */}
          <div className="bg-gray-800 p-6 rounded-lg">
            <label className="block text-lg font-semibold mb-3">
              üë©‚Äçü¶∞ 5. N·∫°n nh√¢n (victim)
            </label>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">T√™n:</label>
                <input
                  type="text"
                  name="victim_name"
                  value={formData.victim_name}
                  onChange={handleInputChange}
                  className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white"
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-2">Vai tr√≤:</label>
                <select
                  name="victim_role"
                  value={formData.victim_role}
                  onChange={handleInputChange}
                  className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white"
                >
                  <option value="tu-sƒ©">Tu sƒ©</option>
                  <option value="ng∆∞·ªùi-d√¢n-l√†nh">Ng∆∞·ªùi d√¢n l√†nh</option>
                  <option value="nh√¢n-ch·ª©ng-t·ªôi-l·ªói">Nh√¢n ch·ª©ng c·ªßa t·ªôi l·ªói qu√° kh·ª©</option>
                </select>
              </div>
            </div>
          </div>

          {/* 6. Nh√¢n v·∫≠t ƒëi·ªÅu tra */}
          <div className="bg-gray-800 p-6 rounded-lg">
            <label className="block text-lg font-semibold mb-3">
              üëÆ‚Äç‚ôÇÔ∏è 6. Nh√¢n v·∫≠t ƒëi·ªÅu tra (investigator)
            </label>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">T√™n:</label>
                <input
                  type="text"
                  name="investigator_name"
                  value={formData.investigator_name}
                  onChange={handleInputChange}
                  className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white"
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-2">ƒê·∫∑c ƒëi·ªÉm:</label>
                <div className="space-y-2">
                  {[
                    { value: '√≠t-n√≥i-t·ª´ng-c√≥-cƒÉn-tu', label: '√çt n√≥i, t·ª´ng c√≥ cƒÉn tu' },
                    { value: 'tin-v√†o-nghi·ªáp-b√°o', label: 'Tin v√†o nghi·ªáp b√°o' },
                    { value: 't·ª´ng-c·ª©u-ng∆∞·ªùi-b·ªè-ng√†nh', label: 'T·ª´ng c·ª©u ng∆∞·ªùi r·ªìi b·ªè ng√†nh m·ªôt th·ªùi gian' }
                  ].map(option => (
                    <label key={option.value} className="flex items-center">
                      <input
                        type="checkbox"
                        name="investigator_traits"
                        value={option.value}
                        checked={formData.investigator_traits.includes(option.value)}
                        onChange={handleInputChange}
                        className="mr-3"
                      />
                      {option.label}
                    </label>
                  ))}
                </div>
              </div>
            </div>
          </div>

          {/* 7. Lo·∫°i nghi·ªáp ch√≠nh */}
          <div className="bg-gray-800 p-6 rounded-lg">
            <label className="block text-lg font-semibold mb-3">
              7. Lo·∫°i nghi·ªáp ch√≠nh (karmic_theme)
            </label>
            <div className="space-y-3">
              {[
                { value: 'gi·∫øt-nh·∫ßm-ng∆∞·ªùi-v√¥-t·ªôi', label: 'üî™ Gi·∫øt nh·∫ßm ng∆∞·ªùi v√¥ t·ªôi' },
                { value: 'oan-sai-tr√°o-ƒë·ªïi-s·ªë-ph·∫≠n', label: 'üß± Oan sai ‚Äì tr√°o ƒë·ªïi s·ªë ph·∫≠n' },
                { value: 's√°t-sinh-l√¢u-d√†i-nghi·ªáp-ngh·ªÅ', label: 'üêÇ S√°t sinh l√¢u d√†i ‚Äì nghi·ªáp ngh·ªÅ' },
                { value: 'h·∫°i-ng∆∞·ªùi-th√¢n-v√¨-ghen-gh√©t', label: 'üßë‚Äçüçº H·∫°i ng∆∞·ªùi th√¢n v√¨ ghen gh√©t' }
              ].map(option => (
                <label key={option.value} className="flex items-center">
                  <input
                    type="radio"
                    name="karmic_theme"
                    value={option.value}
                    checked={formData.karmic_theme === option.value}
                    onChange={handleInputChange}
                    className="mr-3"
                  />
                  {option.label}
                </label>
              ))}
              <label className="flex items-center">
                <input
                  type="radio"
                  name="karmic_theme"
                  value="custom"
                  checked={formData.karmic_theme === 'custom'}
                  onChange={handleInputChange}
                  className="mr-3"
                />
                ‚úçÔ∏è Nh·∫≠p t√πy ch·ªânh
              </label>
              {formData.karmic_theme === 'custom' && (
                <input
                  type="text"
                  name="custom_karmic_theme"
                  value={formData.custom_karmic_theme}
                  onChange={handleInputChange}
                  placeholder="Nh·∫≠p lo·∫°i nghi·ªáp t√πy ch·ªânh"
                  className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 mt-2"
                />
              )}
            </div>
          </div>

          {/* 8. Ph∆∞∆°ng th·ª©c h√© l·ªô s·ª± th·∫≠t */}
          <div className="bg-gray-800 p-6 rounded-lg">
            <label className="block text-lg font-semibold mb-3">
              8. Ph∆∞∆°ng th·ª©c h√© l·ªô s·ª± th·∫≠t (discovery_method)
            </label>
            <div className="space-y-3">
              {[
                { value: 't∆∞·ª£ng-linh-r·ªâ-m√°u', label: 'üßø T∆∞·ª£ng linh r·ªâ m√°u' },
                { value: 'gi·∫•c-m·ªông-l·∫∑p-l·∫°i', label: 'üí≠ Gi·∫•c m·ªông l·∫∑p ƒëi l·∫∑p l·∫°i' },
                { value: 'v·∫≠t-ch·ª©ng-trong-t∆∞·ª£ng', label: 'üìú V·∫≠t ch·ª©ng trong t∆∞·ª£ng / t∆∞·ªùng' },
                { value: 'l·ªùi-k·ªÉ-ch√∫-ti·ªÉu', label: 'üßí L·ªùi k·ªÉ ch√∫ ti·ªÉu / ƒë·ª©a tr·∫ª' },
                { value: '√¢m-thanh-gi·ªØa-ƒë√™m', label: 'üîä √Çm thanh gi·ªØa ƒë√™m' }
              ].map(option => (
                <label key={option.value} className="flex items-center">
                  <input
                    type="radio"
                    name="discovery_method"
                    value={option.value}
                    checked={formData.discovery_method === option.value}
                    onChange={handleInputChange}
                    className="mr-3"
                  />
                  {option.label}
                </label>
              ))}
            </div>
          </div>

          {/* 9. ƒê·ªô s√¢u tri·∫øt l√Ω */}
          <div className="bg-gray-800 p-6 rounded-lg">
            <label className="block text-lg font-semibold mb-3">
              9. ƒê·ªô s√¢u tri·∫øt l√Ω (philosophy_depth)
            </label>
            <div className="space-y-3">
              {[
                { value: 1, label: '1 ‚Äì Nh·∫π (ngh·ªá thu·∫≠t k·ªÉ chuy·ªán)' },
                { value: 3, label: '3 ‚Äì V·ª´a (c√≥ nh√¢n qu·∫£, lu√¢n h·ªìi)' },
                { value: 5, label: '‚úÖ 5 ‚Äì S√¢u (Ph·∫≠t ph√°p, nghi·ªáp l·ª±c, s√°m h·ªëi, l·ªùi rƒÉn)' }
              ].map(option => (
                <label key={option.value} className="flex items-center">
                  <input
                    type="radio"
                    name="philosophy_depth"
                    value={option.value}
                    checked={formData.philosophy_depth === option.value}
                    onChange={handleInputChange}
                    className="mr-3"
                  />
                  {option.label}
                </label>
              ))}
            </div>
          </div>

          {/* 10. ƒê·ªô d√†i truy·ªán */}
          <div className="bg-gray-800 p-6 rounded-lg">
            <label className="block text-lg font-semibold mb-3">
              10. ƒê·ªô d√†i truy·ªán (total_length)
            </label>
            <div className="space-y-3">
              {[
                { value: 'truy·ªán-ng·∫Øn', label: 'Truy·ªán ng·∫Øn (~5.000 t·ª´)' },
                { value: 'truy·ªán-v·ª´a', label: '‚úÖ Truy·ªán v·ª´a (~10.000 t·ª´)' },
                { value: 'truy·ªán-d√†i', label: 'Truy·ªán d√†i (15.000‚Äì20.000 t·ª´)' }
              ].map(option => (
                <label key={option.value} className="flex items-center">
                  <input
                    type="radio"
                    name="total_length"
                    value={option.value}
                    checked={formData.total_length === option.value}
                    onChange={handleInputChange}
                    className="mr-3"
                  />
                  {option.label}
                </label>
              ))}
            </div>
          </div>

          {/* 11. S·ªë ch∆∞∆°ng */}
          <div className="bg-gray-800 p-6 rounded-lg">
            <label className="block text-lg font-semibold mb-3">
              11. S·ªë ch∆∞∆°ng (chapter_count)
            </label>
            <input
              type="number"
              name="chapter_count"
              value={formData.chapter_count}
              onChange={handleInputChange}
              className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white"
              readOnly
            />
            <p className="text-sm text-gray-400 mt-2">‚úÖ 7 ch∆∞∆°ng (c·ªë ƒë·ªãnh theo template A1-R)</p>
          </div>

          {/* 12. ƒê·ªô d√†i m·ªói ch∆∞∆°ng */}
          <div className="bg-gray-800 p-6 rounded-lg">
            <label className="block text-lg font-semibold mb-3">
              12. ƒê·ªô d√†i m·ªói ch∆∞∆°ng (chapter_length)
            </label>
            <div className="space-y-3">
              {[
                { value: 1000, label: '1000 t·ª´' },
                { value: 1500, label: '‚úÖ 1500 t·ª´' },
                { value: 2000, label: '2000 t·ª´' }
              ].map(option => (
                <label key={option.value} className="flex items-center">
                  <input
                    type="radio"
                    name="chapter_length"
                    value={option.value}
                    checked={formData.chapter_length === option.value}
                    onChange={handleInputChange}
                    className="mr-3"
                  />
                  {option.label}
                </label>
              ))}
            </div>
          </div>

          {/* 13. C√°i k·∫øt mong mu·ªën */}
          <div className="bg-gray-800 p-6 rounded-lg">
            <label className="block text-lg font-semibold mb-3">
              13. C√°i k·∫øt mong mu·ªën (ending_type)
            </label>
            <div className="space-y-2">
              {[
                { value: 'b·∫£n-√°n-r√µ-r√†ng', label: '‚úÖ B·∫£n √°n r√µ r√†ng cho k·∫ª x·∫•u' },
                { value: 'th·ª©c-t·ªânh-c·∫£i-t·∫°o', label: '‚úÖ Th·ª©c t·ªânh v√† c·∫£i t·∫°o trong t√π' },
                { value: 'b√†i-h·ªçc-nh√¢n-qu·∫£', label: '‚úÖ B√†i h·ªçc nh√¢n qu·∫£ s√¢u s·∫Øc g·ª≠i ƒë·∫øn kh√°n gi·∫£' }
              ].map(option => (
                <label key={option.value} className="flex items-center">
                  <input
                    type="checkbox"
                    name="ending_type"
                    value={option.value}
                    checked={formData.ending_type.includes(option.value)}
                    onChange={handleInputChange}
                    className="mr-3"
                  />
                  {option.label}
                </label>
              ))}
            </div>
          </div>

          {/* 14. ƒê·ªãnh d·∫°ng ƒë·∫ßu ra */}
          <div className="bg-gray-800 p-6 rounded-lg">
            <label className="block text-lg font-semibold mb-3">
              14. ƒê·ªãnh d·∫°ng ƒë·∫ßu ra (output_format)
            </label>
            <div className="space-y-3">
              {[
                { value: 'file-vƒÉn-b·∫£n', label: 'File vƒÉn b·∫£n (PDF / DOCX)' },
                { value: 'html-web', label: 'HTML ƒë·ªÉ ƒëƒÉng web' },
                { value: 'k·ªãch-b·∫£n-k·ªÉ-chuy·ªán', label: '‚úÖ K·ªãch b·∫£n k·ªÉ chuy·ªán (Podcast, YouTube)' },
                { value: 'json', label: 'JSON (g·ªìm ti√™u ƒë·ªÅ, m√¥ t·∫£ t·ª´ng ch∆∞∆°ng)' }
              ].map(option => (
                <label key={option.value} className="flex items-center">
                  <input
                    type="radio"
                    name="output_format"
                    value={option.value}
                    checked={formData.output_format === option.value}
                    onChange={handleInputChange}
                    className="mr-3"
                  />
                  {option.label}
                </label>
              ))}
            </div>
          </div>

          {/* 15. N·ªôi dung ƒëi·ªÉm nh·∫•n theo t·ª´ng ch∆∞∆°ng */}
          {/* <div className="bg-gray-800 p-6 rounded-lg">
            <label className="block text-lg font-semibold mb-3">
              15. N·ªôi dung ƒëi·ªÉm nh·∫•n theo t·ª´ng ch∆∞∆°ng (chapter_highlights)
            </label>
            <div className="overflow-x-auto">
              <table className="w-full text-sm">
                <thead>
                  <tr className="border-b border-gray-600">
                    <th className="text-left p-3 font-semibold">Ch∆∞∆°ng</th>
                    <th className="text-left p-3 font-semibold">Ti√™u ƒë·ªÅ</th>
                    <th className="text-left p-3 font-semibold">N·ªôi dung ƒëi·ªÉm nh·∫•n (chung, kh√°i qu√°t)</th>
                  </tr>
                </thead>
                <tbody>
                  {chapterHighlights.map((chapter) => (
                    <tr key={chapter.chapter} className="border-b border-gray-700">
                      <td className="p-3 font-medium">{chapter.chapter}</td>
                      <td className="p-3 font-medium">{chapter.title}</td>
                      <td className="p-3 text-gray-300">{chapter.content}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div> */}

          {/* Submit Button */}
          <div className="flex justify-center space-x-4 pt-8">
            <button
              type="submit"
              className="px-8 py-3 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-lg transition-colors"
            >
              T·∫°o truy·ªán
            </button>
            <button
              type="button"
              onClick={() => setFormData({
                genre: 'Ph√° √°n ‚Äì nghi·ªáp b√°o ‚Äì t√¢m linh (k·∫øt th√∫c b·∫±ng b·∫£n √°n v√† b√†i h·ªçc)',
                story_title: '',
                setting: 'ch√πa-c·ªï-tr√™n-n√∫i',
                custom_setting: '',
                main_character_name: 'Nguy·ªÖn H·ªØu Duy',
                main_character_dharma_name: 'T√¢m Minh',
                main_character_past: ['t·ª´ng-gi·∫øt-ng∆∞·ªùi-v√¥-t·ªôi'],
                victim_name: 'S∆∞ c√¥ Nh∆∞ L√†nh',
                victim_role: 'tu-sƒ©',
                investigator_name: 'Th∆∞·ª£ng √∫y L√™ Th·ª•',
                investigator_traits: ['√≠t-n√≥i-t·ª´ng-c√≥-cƒÉn-tu'],
                karmic_theme: 'gi·∫øt-nh·∫ßm-ng∆∞·ªùi-v√¥-t·ªôi',
                custom_karmic_theme: '',
                discovery_method: 't∆∞·ª£ng-linh-r·ªâ-m√°u',
                philosophy_depth: 5,
                total_length: 'truy·ªán-v·ª´a',
                chapter_count: 7,
                chapter_length: 1500,
                ending_type: ['b·∫£n-√°n-r√µ-r√†ng', 'th·ª©c-t·ªânh-c·∫£i-t·∫°o', 'b√†i-h·ªçc-nh√¢n-qu·∫£'],
                output_format: 'k·ªãch-b·∫£n-k·ªÉ-chuy·ªán'
              })}
              className="px-8 py-3 bg-gray-600 hover:bg-gray-700 text-white font-semibold rounded-lg transition-colors"
            >
              Reset Form
            </button>
          </div>
        </form>

        {/* Story Generation Result */}
        {showStory && (
          <div className="mt-8 bg-gray-800 p-6 rounded-lg">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-2xl font-bold text-blue-400">Truy·ªán ƒë∆∞·ª£c t·∫°o</h2>
              {isGenerating && (
                <div className="flex items-center">
                  <LoadingSpinner />
                  <div className="ml-2">
                    <span className="text-gray-300">ƒêang t·∫°o truy·ªán...</span>
                    {retryAttempt > 0 && (
                      <div className="text-yellow-400 text-sm mt-1">
                        üîÑ L·∫ßn th·ª≠: {retryAttempt}/3
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>

            {/* Retry Error Information */}
            {retryError && (
              <div className="mb-4 p-3 bg-yellow-800 border border-yellow-600 rounded-lg">
                <div className="flex items-center">
                  <div className="text-yellow-400 mr-2">‚ö†Ô∏è</div>
                  <div className="text-yellow-100 text-sm">{retryError}</div>
                </div>
              </div>
            )}
            
            <div className="bg-gray-700 p-4 rounded-lg max-h-96 overflow-y-auto">
              <pre className="whitespace-pre-wrap text-gray-100 leading-relaxed">
                {generatedStory || (isGenerating ? (
                  retryAttempt > 0 ? 
                    `ƒêang th·ª≠ l·∫°i l·∫ßn ${retryAttempt}/3...\nVui l√≤ng ch·ªù trong gi√¢y l√°t.` : 
                    'ƒêang kh·ªüi t·∫°o...'
                ) : 'Ch∆∞a c√≥ n·ªôi dung')}
              </pre>
            </div>
            
            {!isGenerating && generatedStory && (
              <div className="mt-4 flex space-x-4">
                <button
                  onClick={() => navigator.clipboard.writeText(generatedStory)}
                  className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors"
                >
                  üìã Copy truy·ªán
                </button>
                <button
                  onClick={() => {
                    const blob = new Blob([generatedStory], { type: 'text/plain' });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `${formData.story_title || 'truyen-buddhist-detective'}.txt`;
                    a.click();
                    URL.revokeObjectURL(url);
                  }}
                  className="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors"
                >
                  üíæ T·∫£i xu·ªëng
                </button>
                <button
                  onClick={() => {
                    setShowStory(false);
                    setGeneratedStory('');
                  }}
                  className="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors"
                >
                  ‚úñÔ∏è ƒê√≥ng
                </button>
              </div>
            )}

            {/* Manual Retry Button - Show when there's an error and not currently generating */}
            {!isGenerating && generatedStory.includes('‚ùå') && (
              <div className="mt-4 flex justify-center">
                <button
                  onClick={handleSubmit}
                  className="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-lg transition-colors flex items-center"
                >
                  üîÑ Th·ª≠ l·∫°i t·∫°o truy·ªán
                </button>
              </div>
            )}

            {/* Save Success Notification */}
            {savedStoryInfo && (
              <div className="mt-4 p-4 bg-green-800 border border-green-600 rounded-lg">
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <div className="text-green-400 mr-3">‚úÖ</div>
                    <div>
                      <p className="text-green-100 font-medium">Truy·ªán ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!</p>
                      <p className="text-green-300 text-sm">T√™n: "{savedStoryInfo.title}"</p>
                      <p className="text-green-300 text-sm">ID: {savedStoryInfo.id}</p>
                    </div>
                  </div>
                  <div className="flex space-x-2">
                    <button
                      onClick={() => router.push('/dashboard')}
                      className="px-3 py-1 bg-green-600 hover:bg-green-700 text-white text-sm rounded transition-colors"
                    >
                      üìö Xem Dashboard
                    </button>
                    <button
                      onClick={() => setSavedStoryInfo(null)}
                      className="px-3 py-1 bg-gray-600 hover:bg-gray-700 text-white text-sm rounded transition-colors"
                    >
                      ‚úñÔ∏è
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}
      </main>
    </div>
  );
};

export default ImageGeneratorPage2;
